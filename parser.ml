type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ADDONE
  | MINUSONE
  | ELETIMES
  | ELEDIVIDE
  | LPARE
  | RPARE
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | AND
  | OR
  | NOT
  | COMMA
  | SEMICOL
  | COL
  | DOT
  | ASSIGN
  | EQUAL
  | NEQUAL
  | GT
  | NLT
  | LT
  | NGT
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | BREAK
  | RETURN
  | FUNCTION
  | STRUCT
  | MATRIX
  | INT
  | FLOAT
  | BOOLEAN
  | STRING
  | TRUE
  | FALSE
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* ADDONE *);
  262 (* MINUSONE *);
  263 (* ELETIMES *);
  264 (* ELEDIVIDE *);
  265 (* LPARE *);
  266 (* RPARE *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* LBRACK *);
  270 (* RBRACK *);
  271 (* AND *);
  272 (* OR *);
  273 (* NOT *);
  274 (* COMMA *);
  275 (* SEMICOL *);
  276 (* COL *);
  277 (* DOT *);
  278 (* ASSIGN *);
  279 (* EQUAL *);
  280 (* NEQUAL *);
  281 (* GT *);
  282 (* NLT *);
  283 (* LT *);
  284 (* NGT *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* ELIF *);
  288 (* FOR *);
  289 (* WHILE *);
  290 (* BREAK *);
  291 (* RETURN *);
  292 (* FUNCTION *);
  293 (* STRUCT *);
  294 (* MATRIX *);
  295 (* INT *);
  296 (* FLOAT *);
  297 (* BOOLEAN *);
  298 (* STRING *);
  299 (* TRUE *);
  300 (* FALSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* INT_LITERAL *);
  302 (* FLOAT_LITERAL *);
  303 (* STRING_LITERAL *);
  304 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\004\000\005\000\005\000\
\007\000\007\000\008\000\008\000\008\000\008\000\008\000\006\000\
\006\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\010\000\010\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\012\000\012\000\013\000\013\000\013\000\014\000\014\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\008\000\005\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\002\000\003\000\003\000\005\000\007\000\009\000\005\000\
\003\000\005\000\007\000\007\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\003\000\007\000\004\000\003\000\002\000\003\000\002\000\
\001\000\002\000\003\000\001\000\003\000\003\000\001\000\002\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\073\000\000\000\000\000\000\000\001\000\003\000\
\004\000\000\000\000\000\000\000\000\000\014\000\011\000\012\000\
\013\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\006\000\016\000\000\000\000\000\010\000\000\000\000\000\
\016\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\036\000\031\000\033\000\032\000\000\000\
\000\000\017\000\000\000\000\000\034\000\056\000\000\000\000\000\
\000\000\066\000\071\000\000\000\068\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\043\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\020\000\072\000\067\000\
\000\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\038\000\000\000\025\000\000\000\000\000\000\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\070\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\028\000\059\000\
\027\000\000\000\023\000"

let yydgoto = "\002\000\
\003\000\004\000\008\000\009\000\019\000\029\000\020\000\049\000\
\050\000\051\000\052\000\053\000\060\000\061\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\001\000\223\254\233\254\000\000\000\000\
\000\000\024\255\029\255\097\255\097\255\000\000\000\000\000\000\
\000\000\000\000\034\255\054\255\038\255\008\255\065\255\097\255\
\000\000\000\000\000\000\041\255\132\255\000\000\232\255\232\255\
\000\000\000\000\003\255\232\255\021\255\083\255\104\255\106\255\
\232\255\042\255\000\000\000\000\000\000\000\000\000\000\000\255\
\071\255\000\000\102\255\189\001\000\000\000\000\053\000\179\255\
\094\255\000\000\000\000\056\255\000\000\000\000\245\001\232\255\
\232\255\232\255\081\000\120\255\232\255\232\255\098\255\005\255\
\000\000\232\255\232\255\232\255\232\255\000\000\000\000\232\255\
\232\255\232\255\232\255\232\255\021\255\232\255\232\255\232\255\
\232\255\232\255\232\255\232\255\000\000\000\000\000\000\000\000\
\004\255\004\255\109\000\137\000\165\000\000\000\100\255\140\255\
\193\000\000\000\115\255\000\000\232\255\103\255\103\255\000\000\
\000\000\028\255\028\255\092\002\064\002\217\001\245\001\189\001\
\100\002\100\002\199\255\199\255\199\255\199\255\000\000\000\000\
\226\255\232\255\226\255\159\255\000\000\169\255\165\255\221\000\
\154\255\249\000\000\000\232\255\232\255\142\255\000\000\226\255\
\232\255\176\255\021\001\181\255\000\000\049\001\000\000\000\000\
\000\000\226\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\188\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\190\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\009\255\000\000\000\000\000\000\190\255\
\000\000\000\000\000\000\000\000\000\000\000\000\081\255\000\000\
\000\000\000\000\000\000\000\000\203\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\105\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\002\036\002\000\000\
\000\000\133\001\161\001\063\255\137\255\144\255\175\255\074\255\
\195\002\206\002\119\002\138\002\157\002\176\002\000\000\000\000\
\190\255\000\000\190\255\000\000\000\000\000\000\000\000\000\000\
\085\255\000\000\000\000\203\255\000\000\000\000\000\000\190\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\182\000\216\000\254\255\
\141\255\187\255\227\255\000\000\000\000\201\255"

let yytablesize = 998
let yytable = "\104\000\
\007\000\054\000\055\000\001\000\057\000\057\000\062\000\063\000\
\069\000\021\000\021\000\067\000\070\000\137\000\010\000\139\000\
\058\000\107\000\030\000\026\000\071\000\028\000\031\000\108\000\
\011\000\024\000\109\000\030\000\149\000\032\000\076\000\077\000\
\012\000\035\000\099\000\100\000\101\000\036\000\155\000\013\000\
\105\000\127\000\128\000\023\000\110\000\111\000\112\000\113\000\
\059\000\059\000\114\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\124\000\125\000\126\000\043\000\
\044\000\045\000\046\000\047\000\048\000\096\000\146\000\024\000\
\053\000\097\000\098\000\027\000\053\000\053\000\053\000\136\000\
\053\000\053\000\053\000\058\000\053\000\025\000\021\000\058\000\
\030\000\068\000\064\000\064\000\058\000\021\000\064\000\021\000\
\021\000\021\000\064\000\064\000\138\000\021\000\064\000\021\000\
\021\000\076\000\077\000\078\000\079\000\080\000\081\000\147\000\
\065\000\021\000\066\000\150\000\021\000\021\000\072\000\021\000\
\073\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\031\000\014\000\015\000\
\016\000\017\000\018\000\095\000\032\000\103\000\033\000\034\000\
\035\000\106\000\054\000\132\000\036\000\133\000\054\000\037\000\
\054\000\055\000\054\000\054\000\054\000\055\000\054\000\135\000\
\038\000\055\000\055\000\039\000\040\000\055\000\041\000\140\000\
\042\000\014\000\015\000\016\000\017\000\018\000\043\000\044\000\
\045\000\046\000\047\000\048\000\031\000\141\000\142\000\144\000\
\063\000\151\000\148\000\032\000\063\000\033\000\094\000\035\000\
\063\000\063\000\153\000\036\000\063\000\007\000\037\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\038\000\
\029\000\008\000\039\000\040\000\029\000\041\000\056\000\042\000\
\014\000\015\000\016\000\017\000\018\000\043\000\044\000\045\000\
\046\000\047\000\048\000\031\000\022\000\000\000\000\000\000\000\
\000\000\031\000\032\000\000\000\033\000\000\000\035\000\000\000\
\032\000\000\000\036\000\000\000\035\000\037\000\000\000\000\000\
\036\000\000\000\000\000\037\000\000\000\000\000\038\000\000\000\
\000\000\039\000\040\000\000\000\041\000\000\000\042\000\014\000\
\015\000\016\000\017\000\018\000\043\000\044\000\045\000\046\000\
\047\000\048\000\043\000\044\000\045\000\046\000\047\000\048\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\037\000\000\000\005\000\006\000\037\000\037\000\
\037\000\000\000\037\000\037\000\037\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\093\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\084\000\000\000\
\085\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\083\000\000\000\084\000\102\000\085\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\129\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\084\000\000\000\
\085\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\083\000\000\000\084\000\130\000\085\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\131\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\084\000\000\000\
\085\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\000\000\000\000\134\000\082\000\
\083\000\000\000\084\000\000\000\085\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\084\000\143\000\
\085\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\083\000\000\000\084\000\145\000\085\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\000\000\152\000\082\000\083\000\000\000\084\000\000\000\
\085\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\154\000\000\000\000\000\000\000\000\000\082\000\
\083\000\000\000\084\000\000\000\085\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\065\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\065\000\000\000\
\000\000\000\000\065\000\065\000\065\000\000\000\065\000\065\000\
\000\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\062\000\000\000\062\000\062\000\062\000\062\000\062\000\
\062\000\000\000\062\000\000\000\000\000\000\000\062\000\062\000\
\062\000\000\000\062\000\062\000\000\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\045\000\045\000\000\000\
\000\000\045\000\045\000\045\000\045\000\000\000\045\000\000\000\
\000\000\000\000\045\000\045\000\045\000\000\000\045\000\045\000\
\045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\046\000\046\000\000\000\000\000\046\000\046\000\046\000\
\046\000\000\000\046\000\000\000\000\000\000\000\046\000\046\000\
\046\000\000\000\046\000\046\000\046\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\084\000\000\000\
\085\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\083\000\000\000\000\000\000\000\085\000\000\000\000\000\087\000\
\088\000\089\000\090\000\091\000\092\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\083\000\000\000\000\000\000\000\
\039\000\039\000\000\000\087\000\088\000\089\000\090\000\091\000\
\092\000\039\000\000\000\000\000\000\000\039\000\039\000\039\000\
\000\000\039\000\039\000\039\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\088\000\
\089\000\090\000\091\000\092\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\088\000\089\000\090\000\091\000\092\000\
\000\000\000\000\000\000\000\000\089\000\090\000\091\000\092\000\
\051\000\000\000\000\000\000\000\051\000\051\000\051\000\000\000\
\051\000\051\000\051\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\052\000\000\000\000\000\000\000\052\000\
\052\000\052\000\000\000\052\000\052\000\052\000\000\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\049\000\000\000\
\000\000\000\000\049\000\049\000\049\000\000\000\049\000\049\000\
\049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\050\000\000\000\000\000\000\000\050\000\050\000\050\000\
\000\000\050\000\050\000\050\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\047\000\000\000\000\000\000\000\
\047\000\047\000\047\000\000\000\047\000\047\000\047\000\048\000\
\047\000\047\000\047\000\048\000\048\000\048\000\000\000\048\000\
\048\000\048\000\000\000\048\000\048\000\048\000"

let yycheck = "\069\000\
\000\000\031\000\032\000\001\000\002\001\002\001\036\000\037\000\
\009\001\012\000\013\000\041\000\013\001\129\000\048\001\131\000\
\014\001\013\001\010\001\012\001\021\001\024\000\002\001\019\001\
\048\001\018\001\022\001\019\001\144\000\009\001\003\001\004\001\
\009\001\013\001\064\000\065\000\066\000\017\001\154\000\011\001\
\070\000\097\000\098\000\010\001\074\000\075\000\076\000\077\000\
\046\001\046\001\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\043\001\
\044\001\045\001\046\001\047\001\048\001\014\001\140\000\018\001\
\010\001\018\001\019\001\011\001\014\001\015\001\016\001\109\000\
\018\001\019\001\020\001\010\001\022\001\048\001\002\001\014\001\
\048\001\048\001\010\001\009\001\019\001\009\001\014\001\011\001\
\012\001\013\001\018\001\019\001\130\000\017\001\022\001\019\001\
\020\001\003\001\004\001\005\001\006\001\007\001\008\001\141\000\
\009\001\029\001\009\001\145\000\032\001\033\001\048\001\035\001\
\019\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\002\001\038\001\039\001\
\040\001\041\001\042\001\046\001\009\001\022\001\011\001\012\001\
\013\001\048\001\010\001\048\001\017\001\010\001\014\001\020\001\
\016\001\010\001\018\001\019\001\020\001\014\001\022\001\045\001\
\029\001\018\001\019\001\032\001\033\001\022\001\035\001\009\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\002\001\013\001\018\001\030\001\
\010\001\010\001\045\001\009\001\014\001\011\001\012\001\013\001\
\018\001\019\001\014\001\017\001\022\001\010\001\020\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\029\001\
\019\001\010\001\032\001\033\001\010\001\035\001\033\000\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\002\001\013\000\255\255\255\255\255\255\
\255\255\002\001\009\001\255\255\011\001\255\255\013\001\255\255\
\009\001\255\255\017\001\255\255\013\001\020\001\255\255\255\255\
\017\001\255\255\255\255\020\001\255\255\255\255\029\001\255\255\
\255\255\032\001\033\001\255\255\035\001\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\255\255\036\001\037\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\255\255\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\019\001\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\255\255\255\255\014\001\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\016\001\255\255\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\255\255\
\255\255\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\255\255\255\255\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\255\255\255\255\
\001\001\002\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\014\001\015\001\016\001\255\255\018\001\019\001\020\001\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\010\001\255\255\255\255\255\255\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\255\255\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\010\001\255\255\
\255\255\255\255\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\010\001\
\022\001\023\001\024\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\255\255\022\001\023\001\024\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ADDONE\000\
  MINUSONE\000\
  ELETIMES\000\
  ELEDIVIDE\000\
  LPARE\000\
  RPARE\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  AND\000\
  OR\000\
  NOT\000\
  COMMA\000\
  SEMICOL\000\
  COL\000\
  DOT\000\
  ASSIGN\000\
  EQUAL\000\
  NEQUAL\000\
  GT\000\
  NLT\000\
  LT\000\
  NGT\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  RETURN\000\
  FUNCTION\000\
  STRUCT\000\
  MATRIX\000\
  INT\000\
  FLOAT\000\
  BOOLEAN\000\
  STRING\000\
  TRUE\000\
  FALSE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 50 "parser.mly"
            ( List.rev (fst _1), List.rev (snd _1) )
# 528 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                  ( [], [] )
# 534 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 54 "parser.mly"
                ( (_2 :: fst _1), snd _1 )
# 542 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stdecl) in
    Obj.repr(
# 55 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 550 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 59 "parser.mly"
    ( { ftyp = Void;
        fname = _2;
        formals = _4;
        body = List.rev _7 } )
# 562 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'formal_list) in
    Obj.repr(
# 65 "parser.mly"
                                      ( {stname = _2; stvar = List.rev _4} )
# 570 "parser.ml"
               : 'stdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                  ( [] )
# 576 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 69 "parser.mly"
                  ( List.rev _1 )
# 583 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                             ( [(_1,_2)] )
# 591 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
                             ( (_3,_4) :: _1 )
# 600 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
        ( Int )
# 606 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Float )
# 612 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
            ( Boolean )
# 618 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
           ( Matrix )
# 624 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
           ( String)
# 630 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                   ( [] )
# 636 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                   ( _2 :: _1 )
# 644 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 87 "parser.mly"
                     ( Expr(_1) )
# 651 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                        ( Return(_2) )
# 658 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "parser.mly"
                            ( Block(List.rev _2) )
# 665 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                          ( If(_3, _5, Block([])) )
# 673 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                       ( If(_3, _5, _7) )
# 682 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                                         ( For(_3, _5, _7, _9) )
# 692 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                ( While(_3, _5) )
# 700 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 95 "parser.mly"
                   ( Initial(_1, _2, Empty) )
# 708 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                               ( Initial(_1, _2, _4) )
# 717 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 97 "parser.mly"
                                                       ( Defaultmat(_2, _4, _6) )
# 727 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 98 "parser.mly"
                                             ( let inputs = match _6 with
                                                              Comma(e1) -> e1
                                                            | Empty -> []
                                                            | _ -> [_6] in IniStrucct(_2, _4, inputs))
# 739 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                 ( Empty )
# 745 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
         ( _1 )
# 752 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 108 "parser.mly"
                ( Intlit(_1) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                   ( Stringlit(_1) )
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 110 "parser.mly"
                  ( Floatlit(_1) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mat_literal) in
    Obj.repr(
# 111 "parser.mly"
                ( Matrixlit(fst _1, snd _1) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
         ( Boollit(true) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
          ( Boollit(false) )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
       ( Var(_1) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
               ( Struaccess (_1, _3))
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                   ( Binop(_1, Add, _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                    ( Binop(_1, Sub, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                    ( Binop(_1, Mult, _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Div, _3) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                  ( Binop(_1, Add, Intlit(1)) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                  ( Binop(_1, Sub, Intlit(1)) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                       ( Binop(_1, Elemult, _3) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                        ( Binop(_1, Elediv, _3) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    ( Binop(_1, Eq, _3) )
# 877 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Neq, _3) )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                 ( Binop(_1, Less, _3) )
# 893 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                  ( Binop(_1, Leq, _3) )
# 901 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                 ( Binop(_1, Greater, _3) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                  ( Binop(_1, Geq, _3) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                  ( Binop(_1, And, _3) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                 ( Binop(_1, Or, _3) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                    ( match _1, _3 with
                        Comma(e1), Comma(e2) -> Comma(e1@e2)
                      | Comma(e1), e2 -> Comma(e1@[e2])
                      | e1, Comma(e2) -> Comma(e1::e2)
                      | e1, e2 -> Comma([e1;e2]))
# 945 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                         ( Uop(Nega, _2) )
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
             ( Uop(Not, _2) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                     ( Assign(_1, _3) )
# 967 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                             ( match _3, _6 with
                                                   Range(_,_), Range(_,_) -> Matslicing(_1, _3, _6)
                                                 | Range(_,_), Intlit(_) -> Matslicing(_1, _3, Range(Ind(_6),Ind(_6)))
                                                 | Intlit(_), Range(_,_) -> Matslicing(_1, Range(Ind(_3),Ind(_3), _6))
                                                 | Intlit(_), Intlit(_) -> Mataccess(_1, _3, _6)
                                                 | _ -> failwith("wrong indexing expression"))
# 981 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 146 "parser.mly"
                            ( let inputs = match _3 with
                                             Comma(e1) -> e1
                                           | Empty -> []
                                           | _ -> [_3] in Call(_1, inputs))
# 992 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                     ( _2 )
# 999 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
             ( Range(Ind(_1), End) )
# 1006 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                  ( Range(Ind(_1), Ind(_3)) )
# 1014 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
             ( Range(Beg, Ind(_2)) )
# 1021 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
        ( Range(Beg, End) )
# 1027 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                  ( [| |], (0, 0) )
# 1033 "parser.ml"
               : 'mat_literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mat_assembly) in
    Obj.repr(
# 158 "parser.mly"
                               ( _2 )
# 1040 "parser.ml"
               : 'mat_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ele) in
    Obj.repr(
# 161 "parser.mly"
        ( [| _1 |], (1, 1) )
# 1047 "parser.ml"
               : 'mat_assembly))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_assembly) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ele) in
    Obj.repr(
# 162 "parser.mly"
                           ( Array.append (fst _1) [| _3 |], (fst (snd _1) , snd (snd _1) +1) )
# 1055 "parser.ml"
               : 'mat_assembly))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_assembly) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ele) in
    Obj.repr(
# 163 "parser.mly"
                             ( Array.append (fst _1) [| _3 |], (fst (snd _1) +1 , 1) )
# 1063 "parser.ml"
               : 'mat_assembly))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 166 "parser.mly"
                  ( _1 )
# 1070 "parser.ml"
               : 'ele))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 167 "parser.mly"
                                  ( -. _2 )
# 1077 "parser.ml"
               : 'ele))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
